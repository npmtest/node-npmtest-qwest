{"/home/travis/build/npmtest/node-npmtest-qwest/test.js":"/* istanbul instrument in package npmtest_qwest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-qwest/lib.npmtest_qwest.js":"/* istanbul instrument in package npmtest_qwest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_qwest = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_qwest = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-qwest/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-qwest && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_qwest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_qwest\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_qwest.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_qwest.rollup.js'] =\n            local.assetsDict['/assets.npmtest_qwest.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_qwest.__dirname +\n                    '/lib.npmtest_qwest.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-qwest/node_modules/qwest/src/qwest.js":"/*! qwest 4.4.5 (https://github.com/pyrsmk/qwest) */\r\n\r\nmodule.exports = function() {\r\n\r\n\tvar global = typeof window != 'undefined' ? window : self,\r\n\t\tpinkyswear = require('pinkyswear'),\r\n\t\tjparam = require('jquery-param'),\r\n\t\tdefaultOptions = {},\r\n\t\t// Default response type for XDR in auto mode\r\n\t\tdefaultXdrResponseType = 'json',\r\n\t\t// Default data type\r\n\t\tdefaultDataType = 'post',\r\n\t\t// Variables for limit mechanism\r\n\t\tlimit = null,\r\n\t\trequests = 0,\r\n\t\trequest_stack = [],\r\n\t\t// Get XMLHttpRequest object\r\n\t\tgetXHR = global.XMLHttpRequest? function(){\r\n\t\t\treturn new global.XMLHttpRequest();\r\n\t\t}: function(){\r\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\r\n\t\t},\r\n\t\t// Guess XHR version\r\n\t\txhr2 = (getXHR().responseType===''),\r\n\r\n\t// Core function\r\n\tqwest = function(method, url, data, options, before) {\r\n\t\t// Format\r\n\t\tmethod = method.toUpperCase();\r\n\t\tdata = data || null;\r\n\t\toptions = options || {};\r\n\t\tfor(var name in defaultOptions) {\r\n\t\t\tif(!(name in options)) {\r\n\t\t\t\tif(typeof defaultOptions[name] == 'object' && typeof options[name] == 'object') {\r\n\t\t\t\t\tfor(var name2 in defaultOptions[name]) {\r\n\t\t\t\t\t\toptions[name][name2] = defaultOptions[name][name2];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\toptions[name] = defaultOptions[name];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Define variables\r\n\t\tvar nativeResponseParsing = false,\r\n\t\t\tcrossOrigin,\r\n\t\t\txhr,\r\n\t\t\txdr = false,\r\n\t\t\ttimeout,\r\n\t\t\taborted = false,\r\n\t\t\tattempts = 0,\r\n\t\t\theaders = {},\r\n\t\t\tmimeTypes = {\r\n\t\t\t\ttext: '*/*',\r\n\t\t\t\txml: 'text/xml',\r\n\t\t\t\tjson: 'application/json',\r\n\t\t\t\tpost: 'application/x-www-form-urlencoded',\r\n\t\t\t\tdocument: 'text/html'\r\n\t\t\t},\r\n\t\t\taccept = {\r\n\t\t\t\ttext: '*/*',\r\n\t\t\t\txml: 'application/xml; q=1.0, text/xml; q=0.8, */*; q=0.1',\r\n\t\t\t\tjson: 'application/json; q=1.0, text/*; q=0.8, */*; q=0.1'\r\n\t\t\t},\r\n\t\t\ti, j,\r\n\t\t\tresponse,\r\n\t\t\tsending = false,\r\n\r\n\t\t// Create the promise\r\n\t\tpromise = pinkyswear(function(pinky) {\r\n\t\t\tpinky.abort = function() {\r\n\t\t\t\tif(!aborted) {\r\n\t\t\t\t\tif(xhr && xhr.readyState != 4) { // https://stackoverflow.com/questions/7287706/ie-9-javascript-error-c00c023f\r\n\t\t\t\t\t\txhr.abort();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(sending) {\r\n\t\t\t\t\t\t--requests;\r\n\t\t\t\t\t\tsending = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\taborted = true;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tpinky.send = function() {\r\n\t\t\t\t// Prevent further send() calls\r\n\t\t\t\tif(sending) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t// Reached request limit, get out!\r\n\t\t\t\tif(requests == limit) {\r\n\t\t\t\t\trequest_stack.push(pinky);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t// Verify if the request has not been previously aborted\r\n\t\t\t\tif(aborted) {\r\n\t\t\t\t\tif(request_stack.length) {\r\n\t\t\t\t\t\trequest_stack.shift().send();\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t// The sending is running\r\n\t\t\t\t++requests;\r\n\t\t\t\tsending = true;\r\n\t\t\t\t// Get XHR object\r\n\t\t\t\txhr = getXHR();\r\n\t\t\t\tif(crossOrigin) {\r\n\t\t\t\t\tif(!('withCredentials' in xhr) && global.XDomainRequest) {\r\n\t\t\t\t\t\txhr = new XDomainRequest(); // CORS with IE8/9\r\n\t\t\t\t\t\txdr = true;\r\n\t\t\t\t\t\tif(method != 'GET' && method != 'POST') {\r\n\t\t\t\t\t\t\tmethod = 'POST';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Open connection\r\n\t\t\t\tif(xdr) {\r\n\t\t\t\t\txhr.open(method, url);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\txhr.open(method, url, options.async, options.user, options.password);\r\n\t\t\t\t\tif(xhr2 && options.async) {\r\n\t\t\t\t\t\txhr.withCredentials = options.withCredentials;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Set headers\r\n\t\t\t\tif(!xdr) {\r\n\t\t\t\t\tfor(var i in headers) {\r\n\t\t\t\t\t\tif(headers[i]) {\r\n\t\t\t\t\t\t\txhr.setRequestHeader(i, headers[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Verify if the response type is supported by the current browser\r\n\t\t\t\tif(xhr2 && options.responseType != 'auto') {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\txhr.responseType = options.responseType;\r\n\t\t\t\t\t\tnativeResponseParsing = (xhr.responseType == options.responseType);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(e) {}\r\n\t\t\t\t}\r\n\t\t\t\t// Plug response handler\r\n\t\t\t\tif(xhr2 || xdr) {\r\n\t\t\t\t\txhr.onload = handleResponse;\r\n\t\t\t\t\txhr.onerror = handleError;\r\n\t\t\t\t\t// http://cypressnorth.com/programming/internet-explorer-aborting-ajax-requests-fixed/\r\n\t\t\t\t\tif(xdr) {\r\n\t\t\t\t\t\txhr.onprogress = function() {};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\txhr.onreadystatechange = function() {\r\n\t\t\t\t\t\tif(xhr.readyState == 4) {\r\n\t\t\t\t\t\t\thandleResponse();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t// Plug timeout\r\n\t\t\t\tif(options.async) {\r\n\t\t\t\t\tif('timeout' in xhr) {\r\n\t\t\t\t\t\txhr.timeout = options.timeout;\r\n\t\t\t\t\t\txhr.ontimeout = handleTimeout;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttimeout = setTimeout(handleTimeout, options.timeout);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// http://cypressnorth.com/programming/internet-explorer-aborting-ajax-requests-fixed/\r\n\t\t\t\telse if(xdr) {\r\n\t\t\t\t\txhr.ontimeout = function() {};\r\n\t\t\t\t}\r\n\t\t\t\t// Override mime type to ensure the response is well parsed\r\n\t\t\t\tif(options.responseType != 'auto' && 'overrideMimeType' in xhr) {\r\n\t\t\t\t\txhr.overrideMimeType(mimeTypes[options.responseType]);\r\n\t\t\t\t}\r\n\t\t\t\t// Run 'before' callback\r\n\t\t\t\tif(before) {\r\n\t\t\t\t\tbefore(xhr);\r\n\t\t\t\t}\r\n\t\t\t\t// Send request\r\n\t\t\t\tif(xdr) {\r\n\t\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/XDomainRequest\r\n\t\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\t\txhr.send(method != 'GET'? data : null);\r\n\t\t\t\t\t}, 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\txhr.send(method != 'GET' ? data : null);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\treturn pinky;\r\n\t\t}),\r\n\r\n\t\t// Handle the response\r\n\t\thandleResponse = function() {\r\n\t\t\tvar i, responseType;\r\n\t\t\t// Stop sending state\r\n\t\t\tsending = false;\r\n\t\t\tclearTimeout(timeout);\r\n\t\t\t// Launch next stacked request\r\n\t\t\tif(request_stack.length) {\r\n\t\t\t\trequest_stack.shift().send();\r\n\t\t\t}\r\n\t\t\t// Verify if the request has not been previously aborted\r\n\t\t\tif(aborted) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Decrease the number of requests\r\n\t\t\t--requests;\r\n\t\t\t// Handle response\r\n\t\t\ttry{\r\n\t\t\t\t// Process response\r\n\t\t\t\tif(nativeResponseParsing) {\r\n\t\t\t\t\tif('response' in xhr && xhr.response === null) {\r\n\t\t\t\t\t\tthrow 'The request response is empty';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresponse = xhr.response;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Guess response type\r\n\t\t\t\t\tresponseType = options.responseType;\r\n\t\t\t\t\tif(responseType == 'auto') {\r\n\t\t\t\t\t\tif(xdr) {\r\n\t\t\t\t\t\t\tresponseType = defaultXdrResponseType;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tvar ct = xhr.getResponseHeader('Content-Type') || '';\r\n\t\t\t\t\t\t\tif(ct.indexOf(mimeTypes.json)>-1) {\r\n\t\t\t\t\t\t\t\tresponseType = 'json';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(ct.indexOf(mimeTypes.xml) > -1) {\r\n\t\t\t\t\t\t\t\tresponseType = 'xml';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tresponseType = 'text';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Handle response type\r\n\t\t\t\t\tswitch(responseType) {\r\n\t\t\t\t\t\tcase 'json':\r\n\t\t\t\t\t\t\tif(xhr.responseText.length) {\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tif('JSON' in global) {\r\n\t\t\t\t\t\t\t\t\t\tresponse = JSON.parse(xhr.responseText);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tresponse = new Function('return (' + xhr.responseText + ')')();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tcatch(e) {\r\n\t\t\t\t\t\t\t\t\tthrow \"Error while parsing JSON body : \"+e;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'xml':\r\n\t\t\t\t\t\t\t// Based on jQuery's parseXML() function\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t// Standard\r\n\t\t\t\t\t\t\t\tif(global.DOMParser) {\r\n\t\t\t\t\t\t\t\t\tresponse = (new DOMParser()).parseFromString(xhr.responseText,'text/xml');\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// IE<9\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tresponse = new ActiveXObject('Microsoft.XMLDOM');\r\n\t\t\t\t\t\t\t\t\tresponse.async = 'false';\r\n\t\t\t\t\t\t\t\t\tresponse.loadXML(xhr.responseText);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch(e) {\r\n\t\t\t\t\t\t\t\tresponse = undefined;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!response || !response.documentElement || response.getElementsByTagName('parsererror').length) {\r\n\t\t\t\t\t\t\t\tthrow 'Invalid XML';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tresponse = xhr.responseText;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Late status code verification to allow passing data when, per example, a 409 is returned\r\n\t\t\t\t// --- https://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\r\n\t\t\t\tif('status' in xhr && !/^2|1223/.test(xhr.status)) {\r\n\t\t\t\t\tthrow xhr.status + ' (' + xhr.statusText + ')';\r\n\t\t\t\t}\r\n\t\t\t\t// Fulfilled\r\n\t\t\t\tpromise(true, [xhr, response]);\r\n\t\t\t}\r\n\t\t\tcatch(e) {\r\n\t\t\t\t// Rejected\r\n\t\t\t\tpromise(false, [e, xhr, response]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Handle errors\r\n\t\thandleError = function(message) {\r\n\t\t\tif(!aborted) {\r\n\t\t\t\tmessage = typeof message == 'string' ? message : 'Connection aborted';\r\n\t\t\t\tpromise.abort();\r\n\t\t\t\tpromise(false, [new Error(message), xhr, null]);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\t\r\n\t\t// Handle timeouts\r\n\t\thandleTimeout = function() {\r\n\t\t\tif(!aborted) {\r\n\t\t\t\tif(!options.attempts || ++attempts != options.attempts) {\r\n\t\t\t\t\txhr.abort();\r\n\t\t\t\t\tsending = false;\r\n\t\t\t\t\tpromise.send();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\thandleError('Timeout (' + url + ')');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Normalize options\r\n\t\toptions.async = 'async' in options ? !!options.async : true;\r\n\t\toptions.cache = 'cache' in options ? !!options.cache : false;\r\n\t\toptions.dataType = 'dataType' in options ? options.dataType.toLowerCase() : defaultDataType;\r\n\t\toptions.responseType = 'responseType' in options ? options.responseType.toLowerCase() : 'auto';\r\n\t\toptions.user = options.user || '';\r\n\t\toptions.password = options.password || '';\r\n\t\toptions.withCredentials = !!options.withCredentials;\r\n\t\toptions.timeout = 'timeout' in options ? parseInt(options.timeout, 10) : 30000;\r\n\t\toptions.attempts = 'attempts' in options ? parseInt(options.attempts, 10) : 1;\r\n\r\n\t\t// Guess if we're dealing with a cross-origin request\r\n\t\ti = url.match(/\\/\\/(.+?)\\//);\r\n\t\tcrossOrigin = i && (i[1] ? i[1] != location.host : false);\r\n\r\n\t\t// Prepare data\r\n\t\tif('ArrayBuffer' in global && data instanceof ArrayBuffer) {\r\n\t\t\toptions.dataType = 'arraybuffer';\r\n\t\t}\r\n\t\telse if('Blob' in global && data instanceof Blob) {\r\n\t\t\toptions.dataType = 'blob';\r\n\t\t}\r\n\t\telse if('Document' in global && data instanceof Document) {\r\n\t\t\toptions.dataType = 'document';\r\n\t\t}\r\n\t\telse if('FormData' in global && data instanceof FormData) {\r\n\t\t\toptions.dataType = 'formdata';\r\n\t\t}\r\n\t\tif(data !== null) {\r\n\t\t\tswitch(options.dataType) {\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\tdata = JSON.stringify(data);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'post':\r\n\t\t\t\t\tdata = jparam(data);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Prepare headers\r\n\t\tif(options.headers) {\r\n\t\t\tvar format = function(match,p1,p2) {\r\n\t\t\t\treturn p1 + p2.toUpperCase();\r\n\t\t\t};\r\n\t\t\tfor(i in options.headers) {\r\n\t\t\t\theaders[i.replace(/(^|-)([^-])/g,format)] = options.headers[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!('Content-Type' in headers) && method!='GET') {\r\n\t\t\tif(options.dataType in mimeTypes) {\r\n\t\t\t\tif(mimeTypes[options.dataType]) {\r\n\t\t\t\t\theaders['Content-Type'] = mimeTypes[options.dataType];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!headers.Accept) {\r\n\t\t\theaders.Accept = (options.responseType in accept) ? accept[options.responseType] : '*/*';\r\n\t\t}\r\n\t\tif(!crossOrigin && !('X-Requested-With' in headers)) { // (that header breaks in legacy browsers with CORS)\r\n\t\t\theaders['X-Requested-With'] = 'XMLHttpRequest';\r\n\t\t}\r\n\t\tif(!options.cache && !('Cache-Control' in headers)) {\r\n\t\t\theaders['Cache-Control'] = 'no-cache';\r\n\t\t}\r\n\r\n\t\t// Prepare URL\r\n\t\tif(method == 'GET' && data && typeof data == 'string') {\r\n\t\t\turl += (/\\?/.test(url)?'&':'?') + data;\r\n\t\t}\r\n\r\n\t\t// Start the request\r\n\t\tif(options.async) {\r\n\t\t\tpromise.send();\r\n\t\t}\r\n\r\n\t\t// Return promise\r\n\t\treturn promise;\r\n\r\n\t};\r\n\t\r\n\t// Define external qwest object\r\n\tvar getNewPromise = function(q) {\r\n\t\t\t// Prepare\r\n\t\t\tvar promises = [],\r\n\t\t\t\tloading = 0,\r\n\t\t\t\tvalues = [];\r\n\t\t\t// Create a new promise to handle all requests\r\n\t\t\treturn pinkyswear(function(pinky) {\r\n\t\t\t\t// Basic request method\r\n\t\t\t\tvar method_index = -1,\r\n\t\t\t\t\tcreateMethod = function(method) {\r\n\t\t\t\t\t\treturn function(url, data, options, before) {\r\n\t\t\t\t\t\t\tvar index = ++method_index;\r\n\t\t\t\t\t\t\t++loading;\r\n\t\t\t\t\t\t\tpromises.push(qwest(method, pinky.base + url, data, options, before).then(function(xhr, response) {\r\n\t\t\t\t\t\t\t\tvalues[index] = arguments;\r\n\t\t\t\t\t\t\t\tif(!--loading) {\r\n\t\t\t\t\t\t\t\t\tpinky(true, values.length == 1 ? values[0] : [values]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, function() {\r\n\t\t\t\t\t\t\t\tpinky(false, arguments);\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\treturn pinky;\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t};\r\n\t\t\t\t// Define external API\r\n\t\t\t\tpinky.get = createMethod('GET');\r\n\t\t\t\tpinky.post = createMethod('POST');\r\n\t\t\t\tpinky.put = createMethod('PUT');\r\n\t\t\t\tpinky['delete'] = createMethod('DELETE');\r\n\t\t\t\tpinky['catch'] = function(f) {\r\n\t\t\t\t\treturn pinky.then(null, f);\r\n\t\t\t\t};\r\n\t\t\t\tpinky.complete = function(f) {\r\n\t\t\t\t\tvar func = function() {\r\n\t\t\t\t\t\tf(); // otherwise arguments will be passed to the callback\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn pinky.then(func, func);\r\n\t\t\t\t};\r\n\t\t\t\tpinky.map = function(type, url, data, options, before) {\r\n\t\t\t\t\treturn createMethod(type.toUpperCase()).call(this, url, data, options, before);\r\n\t\t\t\t};\r\n\t\t\t\t// Populate methods from external object\r\n\t\t\t\tfor(var prop in q) {\r\n\t\t\t\t\tif(!(prop in pinky)) {\r\n\t\t\t\t\t\tpinky[prop] = q[prop];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Set last methods\r\n\t\t\t\tpinky.send = function() {\r\n\t\t\t\t\tfor(var i=0, j=promises.length; i<j; ++i) {\r\n\t\t\t\t\t\tpromises[i].send();\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn pinky;\r\n\t\t\t\t};\r\n\t\t\t\tpinky.abort = function() {\r\n\t\t\t\t\tfor(var i=0, j=promises.length; i<j; ++i) {\r\n\t\t\t\t\t\tpromises[i].abort();\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn pinky;\r\n\t\t\t\t};\r\n\t\t\t\treturn pinky;\r\n\t\t\t});\r\n\t\t},\r\n\t\tq = {\r\n\t\t\tbase: '',\r\n\t\t\tget: function() {\r\n\t\t\t\treturn getNewPromise(q).get.apply(this, arguments);\r\n\t\t\t},\r\n\t\t\tpost: function() {\r\n\t\t\t\treturn getNewPromise(q).post.apply(this, arguments);\r\n\t\t\t},\r\n\t\t\tput: function() {\r\n\t\t\t\treturn getNewPromise(q).put.apply(this, arguments);\r\n\t\t\t},\r\n\t\t\t'delete': function() {\r\n\t\t\t\treturn getNewPromise(q)['delete'].apply(this, arguments);\r\n\t\t\t},\r\n\t\t\tmap: function() {\r\n\t\t\t\treturn getNewPromise(q).map.apply(this, arguments);\r\n\t\t\t},\r\n\t\t\txhr2: xhr2,\r\n\t\t\tlimit: function(by) {\r\n\t\t\t\tlimit = by;\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\tsetDefaultOptions: function(options) {\r\n\t\t\t\tdefaultOptions = options;\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\tsetDefaultXdrResponseType: function(type) {\r\n\t\t\t\tdefaultXdrResponseType = type.toLowerCase();\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\tsetDefaultDataType: function(type) {\r\n\t\t\t\tdefaultDataType = type.toLowerCase();\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\tgetOpenRequests: function() {\r\n\t\t\t\treturn requests;\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\treturn q;\r\n\r\n}();\r\n","/home/travis/build/npmtest/node-npmtest-qwest/node_modules/qwest/gulpfile.js":"var fs = require('fs'),\r\n\tgulp = require('gulp'),\r\n\tsize = require('gulp-sizereport'),\r\n\tjshint = require('gulp-jshint'),\r\n\tuglify = require('gulp-uglify'),\r\n\tresolve = require('resolve'),\r\n\trename = require('gulp-rename'),\r\n\treplace = require('gulp-replace'),\r\n\tmerge = require('merge2'),\r\n\tshell = require('gulp-shell'),\r\n\tderequire = require('gulp-derequire'),\r\n\tbrowserify = require('browserify'),\r\n\tresolve = require('resolve'),\r\n\tthrough2 = require('through2'),\r\n\t_ = require('lodash');\r\n\r\nvar name = 'qwest',\r\n\tversion = fs.readFileSync('./src/'+name+'.js', {encoding: 'utf8'}).match(/^\\/\\*\\! [\\w-]+ ([0-9.]+)/)[1];\r\n\r\n// ======================================== gulp version\r\n\r\ngulp.task('version', function() {\r\n\r\n\tvar streams = merge();\r\n\r\n\tstreams.add(\r\n\t\tgulp.src( './package.json' )\r\n\t\t\t.pipe( replace(/\"version\": \"[0-9.]+\",/, '\"version\": \"'+version+'\",') )\r\n\t\t\t.pipe( gulp.dest('.') )\r\n\t);\r\n\r\n\tstreams.add(\r\n\t\tgulp.src( './README.md' )\r\n\t\t\t.pipe( replace(/^(\\w+) [0-9.]+/, '$1 '+version) )\r\n\t\t\t.pipe( gulp.dest('.') )\r\n\t);\r\n\r\n\treturn streams;\r\n\r\n});\r\n\r\n// ======================================== gulp lint\r\n\r\ngulp.task('lint', function() {\r\n\r\n\treturn gulp.src( './src/'+name+'.js' )\r\n\t\t.pipe( jshint() )\r\n\t\t.pipe( jshint.reporter('jshint-stylish') );\r\n\r\n});\r\n\r\n// ======================================== gulp build\r\n\r\ngulp.task('build', ['version', 'lint'], function() {\r\n\t\r\n\treturn gulp.src( './src/'+name+'.js' )\r\n\t\t\t\t.pipe( size() )\r\n\t\t\t\t.pipe( through2.obj(function(file, enc, next) {\r\n\t\t\r\n\t\t\t\t\tvar b = browserify(null, {\r\n\t\t\t\t\t\tstandalone: name,\r\n\t\t\t\t\t\tinsertGlobalVars: {process: false}\r\n\t\t\t\t\t});\r\n\t\t\r\n\t\t\t\t\t(_.keys(require('./package.json').dependencies) || []).forEach(function(name) {\r\n\t\t\t\t\t\tb.add(resolve.sync(name, {moduleDirectory: './node_modules/'}));\r\n\t\t\t\t\t});\r\n\t\t\r\n\t\t\t\t\tb.require('./src/'+name+'.js', {expose: name});\r\n\t\t\r\n\t\t\t\t\tb.bundle(function(err, res) {\r\n\t\t\t\t\t\tfile.contents = res;\r\n\t\t\t\t\t\tnext(null, file);\r\n\t\t\t\t\t});\r\n\t\t\r\n\t\t\t\t}) )\r\n\t\t\t\t.pipe( derequire() )\r\n\t\t\t\t.pipe( uglify() )\r\n\t\t\t\t.pipe( rename(name+'.min.js') )\r\n\t\t\t\t.pipe( gulp.dest('.') )\r\n\t\t\t\t.pipe( size({gzip:true}) );\r\n\r\n});\r\n\r\n// ======================================== gulp publish\r\n\r\ngulp.task('publish', shell.task([\r\n\t\"git tag -a \"+version+\" -m '\"+version+\"'\",\r\n\t'git push --tags',\r\n\t'npm publish',\r\n\t'jam publish'\r\n]));\r\n\r\n// ======================================== gulp\r\n\r\ngulp.task('default', ['build']);\r\n"}